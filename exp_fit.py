import numpy as np
import math
import matplotlib.pyplot as plt

# sample data for tests
# solve_title = 'Test Data'
# y = np.array([6.065e-06,1.014e-06,1.074e-06,1.134e-06,1.439e-06,5.960e-07,1.381e-06,1.600e-06,1.103e-06,1.342e-06,3.370e-06,2.307e-06,5.159e-06,1.122e-05,3.161e-06,2.782e-06,2.040e-07,1.584e-06,1.715e-06,4.237e-06,5.458e-06,5.299e-06,4.065e-05,2.172e-05,2.119e-05,2.204e-05,2.257e-05,2.284e-05,2.478e-05,2.420e-05,2.505e-05,2.626e-05,2.629e-05])
# x = np.array([1,2,3,4,6,8,10,21,22,23,55,60,110,220,320,440,460,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800])

# n_mec = 108882 with plain recursion
# solve_title = 'Plain Recursion 108822'
# x = np.array([1,2,3,4,5,6,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])
# y = np.array([1.462e-06,3.180e-07,3.570e-07,4.280e-07,4.870e-07,5.870e-07,9.840e-07,2.237e-06,2.137e-06,3.162e-06,1.406e-06,8.013e-06,1.031e-05,2.180e-05,3.651e-05,6.009e-05,9.720e-05,1.579e-04,2.589e-04,4.291e-04,7.090e-04,1.246e-03,2.119e-03,3.799e-03,7.024e-03,1.191e-02,1.967e-02,3.323e-02,5.481e-02,9.164e-02,1.514e-01,2.517e-01,4.250e-01,7.087e-01,1.187e+00,1.959e+00,3.274e+00,5.428e+00,8.980e+00,1.490e+01,2.440e+01,4.016e+01,6.683e+01,1.115e+02,1.860e+02,3.104e+02,5.169e+02])

# n_mec = 108986 with plain recursion
# solve_title = 'Plain Recursion 108986'
# x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])
# y = np.array([4.248e-06,1.984e-06,1.924e-06,1.663e-06,1.893e-06,2.234e-06,2.514e-06,3.115e-06,4.067e-06,5.130e-06,4.248e-06,3.978e-06,5.721e-06,8.777e-06,1.551e-05,2.571e-05,3.582e-05,5.890e-05,9.773e-05,1.731e-04,2.762e-04,4.501e-04,7.529e-04,1.268e-03,2.263e-03,3.931e-03,6.380e-03,1.679e-02,1.754e-02,2.875e-02,4.777e-02,7.958e-02,1.324e-01,2.209e-01,3.670e-01,6.119e-01,1.021e+00,1.704e+00,2.872e+00,4.801e+00,8.126e+00,1.320e+01,2.201e+01,3.913e+01,6.195e+01,1.061e+02,1.732e+02,2.820e+02,4.513e+02,7.125e+02])

# Clever Bruteforcing (solution 2)
# solve_title = 'Clever Bruteforcing'
# x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,60,65,70,75,80,85,90,95,100,110,120,130,140,150,160,170,180,190,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800])
# y = np.array([1.700e-06,4.280e-07,3.680e-07,3.290e-07,5.270e-07,1.030e-07,3.780e-07,3.580e-07,3.380e-07,6.760e-07,8.460e-07,3.680e-07,3.980e-07,3.980e-07,3.970e-07,3.090e-07,3.780e-07,3.580e-07,3.880e-07,3.380e-07,1.024e-06,4.970e-07,4.580e-07,5.170e-07,4.470e-07,4.580e-07,5.660e-07,4.480e-07,4.970e-07,4.280e-07,3.380e-07,4.170e-07,4.270e-07,3.880e-07,3.480e-07,3.680e-07,4.327e-07,3.090e-07,3.580e-07,2.584e-07,2.300e-07,2.843e-07,1.170e-07,3.480e-07,1.440e-07,3.680e-07,3.580e-07,4.400e-08,3.880e-07,3.680e-07,1.253e-06,7.660e-07,5.470e-07,5.870e-07,6.860e-07,6.470e-07,6.660e-07,8.250e-07,6.760e-07,6.170e-07,1.770e-06,1.005e-06,8.550e-07,8.060e-07,9.240e-07,8.650e-07,8.360e-07,8.050e-07,9.450e-07,1.242e-06,1.929e-06,2.087e-06,1.054e-06,3.280e-07,1.103e-06,1.223e-06,2.400e-07,1.283e-06,1.391e-06,1.150e-06,3.171e-06,2.187e-06,2.734e-06,4.099e-06,1.310e-06,2.903e-06,3.530e-06,3.381e-06,2.840e-06,3.480e-06,1.650e-06,4.361e-06,3.490e-06,3.887e-06,3.669e-06,3.708e-06,4.106e-06,3.019e-06,3.170e-06,5.796e-06])

# Clever Bruteforcing (solution 2)
solve_title = 'Clever Bruteforcing'
x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,60,65,70,75,80,85,90,95,100,110,120,130,140,150,160,170,180,190,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800])
y = np.array([1.844e-06,3.910e-07,3.700e-07,3.500e-07,4.010e-07,3.610e-07,3.810e-07,3.910e-07,3.500e-07,4.410e-07,1.613e-06,6.010e-07,5.410e-07,6.110e-07,9.020e-07,5.310e-07,5.210e-07,5.720e-07,6.310e-07,6.620e-07,1.803e-06,8.720e-07,8.510e-07,8.310e-07,7.410e-07,7.710e-07,8.720e-07,6.910e-07,7.810e-07,6.820e-07,5.810e-07,6.620e-07,6.910e-07,7.020e-07,5.910e-07,6.120e-07,6.010e-07,5.710e-07,6.110e-07,6.210e-07,6.310e-07,6.210e-07,5.910e-07,6.310e-07,6.710e-07,6.210e-07,6.410e-07,6.610e-07,7.220e-07,6.910e-07,1.994e-06,9.620e-07,8.410e-07,1.082e-06,1.373e-06,1.192e-06,1.593e-06,1.362e-06,1.392e-06,1.062e-06,2.835e-06,1.373e-06,1.373e-06,1.433e-06,1.894e-06,1.463e-06,1.703e-06,1.543e-06,1.793e-06,1.753e-06,3.026e-06,2.385e-06,1.282e-06,1.883e-06,2.174e-06,2.384e-06,4.558e-06,2.555e-06,2.715e-06,2.254e-06,3.537e-06,3.156e-06,2.906e-06,1.433e-06,2.615e-06,1.503e-06,1.834e-06,1.694e-06,1.703e-06,1.673e-06,1.694e-06,1.834e-06,3.116e-06,1.903e-06,1.984e-06,2.014e-06,2.054e-06,2.254e-06,2.344e-06,2.304e-06])

# Dynamic programming 1 (solution 3)
# solve_title = 'Dynamic programming 1'
# x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,60,65,70,75,80,85,90,95,100,110,120,130,140,150,160,170,180,190,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800])
# y = np.array([2.495e-06,4.110e-07,4.210e-07,4.400e-07,4.910e-07,5.910e-07,5.410e-07,5.310e-07,5.910e-07,7.110e-07,1.142e-06,5.810e-07,6.310e-07,6.910e-07,7.910e-07,7.520e-07,7.610e-07,7.410e-07,7.710e-07,8.920e-07,1.843e-06,1.182e-06,1.383e-06,1.613e-06,1.993e-06,2.014e-06,2.104e-06,1.693e-06,1.302e-06,1.273e-06,1.202e-06,1.253e-06,1.312e-06,1.282e-06,1.292e-06,1.253e-06,1.293e-06,1.273e-06,1.333e-06,1.303e-06,1.353e-06,1.403e-06,1.413e-06,1.462e-06,1.473e-06,1.503e-06,1.473e-06,1.503e-06,1.603e-06,1.713e-06,3.386e-06,2.385e-06,2.054e-06,2.245e-06,2.475e-06,2.755e-06,3.186e-06,3.777e-06,3.257e-06,3.146e-06,5.099e-06,4.008e-06,4.538e-06,4.839e-06,5.981e-06,6.943e-06,5.490e-06,5.911e-06,6.712e-06,7.644e-06,1.102e-05,8.937e-06,1.148e-05,9.768e-06,1.004e-05,1.153e-05,1.140e-05,1.227e-05,1.355e-05,1.385e-05,2.028e-05,1.652e-05,1.568e-05,1.641e-05,1.707e-05,1.733e-05,1.841e-05,1.929e-05,1.942e-05,2.117e-05,2.196e-05,2.151e-05,2.249e-05,2.291e-05,2.611e-05,3.225e-05,4.608e-05,4.697e-05,4.592e-05,2.733e-05])

# Dynamic programming 2 (solution 4)
# solve_title = 'Dynamic programming 2'
# x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,60,65,70,75,80,85,90,95,100,110,120,130,140,150,160,170,180,190,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500])
# y = np.array([2.344e-06,3.510e-07,4.410e-07,4.810e-07,5.210e-07,6.010e-07,5.510e-07,6.510e-07,6.710e-07,7.020e-07,1.402e-06,7.910e-07,6.510e-07,7.510e-07,7.410e-07,8.320e-07,8.310e-07,8.820e-07,9.020e-07,1.002e-06,1.914e-06,1.272e-06,1.743e-06,2.014e-06,2.424e-06,2.695e-06,2.675e-06,2.205e-06,2.154e-06,2.084e-06,2.435e-06,2.495e-06,2.765e-06,2.795e-06,2.936e-06,3.076e-06,3.236e-06,3.536e-06,3.797e-06,4.098e-06,4.830e-06,5.270e-06,5.440e-06,6.131e-06,6.943e-06,7.394e-06,8.546e-06,9.849e-06,1.070e-05,1.177e-05,2.072e-05,2.586e-05,3.048e-05,3.813e-05,4.503e-05,5.253e-05,6.392e-05,6.980e-05,7.179e-05,7.379e-05,8.623e-05,1.086e-04,1.557e-04,2.739e-04,3.818e-04,3.925e-04,3.995e-04,4.352e-04,5.039e-04,5.937e-04,1.140e-03,1.618e-03,3.625e-03,1.736e-02,2.407e-02,2.948e-02,4.070e-02,9.580e-02,2.692e-01,1.061e+00,5.338e+00,2.040e+01,9.590e+01,5.952e+02,2.180e+03])

const_array = np.polyfit(x, np.log(y), 1, w=np.sqrt(y)) # gets constants for the exp function
print("Base equation: a*e^bx")
print(f"Constants: {const_array[1]}, {const_array[0]}")
print(f"Final exponencial fit equation: e^{const_array[1]} * e^{const_array[0]}*x")
print(f"Prediction, in seconds, to solve the problem with length 800: {math.e ** const_array[1] * math.e ** (const_array[0] * 800)}")

def f(a):
   return math.e ** const_array[1] * math.e ** (const_array[0] * a)

plt.title(f"{solve_title}")  
plt.xlabel(f"Final position\nPredicted time for final position 800: {math.e ** const_array[1] * math.e ** (const_array[0] * 800)} s")
plt.ylabel("Time [s]")
plt.plot(x, y, 'bo', label=f'{solve_title} results')
plt.plot(x, f(x), 'r', label='Exponencial fit equation')
plt.legend()
plt.show()